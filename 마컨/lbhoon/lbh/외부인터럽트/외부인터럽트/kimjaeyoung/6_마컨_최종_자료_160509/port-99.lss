
port-99.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002b4  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  00000352  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000065  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000011c  00000000  00000000  000003d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000b9  00000000  00000000  000004f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000146  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000093  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_1>
   8:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  c6:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <delay>:

unsigned char FND[9]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80};
unsigned char F_index;
unsigned char LED,i;
void delay(unsigned long k) //시간 지연 
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	00 d0       	rcall	.+0      	; 0xd4 <delay+0x6>
  d4:	00 d0       	rcall	.+0      	; 0xd6 <delay+0x8>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	69 83       	std	Y+1, r22	; 0x01
  dc:	7a 83       	std	Y+2, r23	; 0x02
  de:	8b 83       	std	Y+3, r24	; 0x03
  e0:	9c 83       	std	Y+4, r25	; 0x04
	while(--k);
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	ab 81       	ldd	r26, Y+3	; 0x03
  e8:	bc 81       	ldd	r27, Y+4	; 0x04
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	a1 09       	sbc	r26, r1
  ee:	b1 09       	sbc	r27, r1
  f0:	89 83       	std	Y+1, r24	; 0x01
  f2:	9a 83       	std	Y+2, r25	; 0x02
  f4:	ab 83       	std	Y+3, r26	; 0x03
  f6:	bc 83       	std	Y+4, r27	; 0x04
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	9a 81       	ldd	r25, Y+2	; 0x02
  fc:	ab 81       	ldd	r26, Y+3	; 0x03
  fe:	bc 81       	ldd	r27, Y+4	; 0x04
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	a1 05       	cpc	r26, r1
 104:	b1 05       	cpc	r27, r1
 106:	69 f7       	brne	.-38     	; 0xe2 <delay+0x14>
}
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	cf 91       	pop	r28
 112:	df 91       	pop	r29
 114:	08 95       	ret

00000116 <__vector_1>:
SIGNAL(SIG_INTERRUPT0)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	00 90 5b 00 	lds	r0, 0x005B
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
	F_index++; //FND배열의 인자 증가 
 13a:	80 91 0a 01 	lds	r24, 0x010A
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 0a 01 	sts	0x010A, r24
	if(F_index==9) 
 144:	80 91 0a 01 	lds	r24, 0x010A
 148:	89 30       	cpi	r24, 0x09	; 9
 14a:	11 f4       	brne	.+4      	; 0x150 <__vector_1+0x3a>
	F_index=0; //8까지 출력 했으면 초기화 
 14c:	10 92 0a 01 	sts	0x010A, r1
	PORTC=FND[F_index]; //포트 C로 FND값 출력 
 150:	a5 e3       	ldi	r26, 0x35	; 53
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	80 91 0a 01 	lds	r24, 0x010A
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	e0 50       	subi	r30, 0x00	; 0
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	80 81       	ld	r24, Z
 164:	8c 93       	st	X, r24
}
 166:	cf 91       	pop	r28
 168:	df 91       	pop	r29
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	00 92 5b 00 	sts	0x005B, r0
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <main>:
	
int main(void)
{
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
	DDRC=0xff; // 포트 C 출력 포트로 사용 
 18e:	e4 e3       	ldi	r30, 0x34	; 52
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	80 83       	st	Z, r24
	DDRA=0xff; // 포트 A 출력 포트로 사용 
 196:	ea e3       	ldi	r30, 0x3A	; 58
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	80 83       	st	Z, r24
	DDRD=0xfc; // PD0와 PD1핀 입력 핀으로 사용 
 19e:	e1 e3       	ldi	r30, 0x31	; 49
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	8c ef       	ldi	r24, 0xFC	; 252
 1a4:	80 83       	st	Z, r24
	F_index=0; //index 값 초기화 
 1a6:	10 92 0a 01 	sts	0x010A, r1
	EIMSK=0x03; // 외부 인터럽트 0,1 사용 
 1aa:	e9 e5       	ldi	r30, 0x59	; 89
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	80 83       	st	Z, r24
	EICRA=0x03; // 상승 모서리 인터럽트 요청 
 1b2:	ea e6       	ldi	r30, 0x6A	; 106
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	80 83       	st	Z, r24
	SREG |=0x80; // 전체 인터럽트 허가 
 1ba:	af e5       	ldi	r26, 0x5F	; 95
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	ef e5       	ldi	r30, 0x5F	; 95
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	80 68       	ori	r24, 0x80	; 128
 1c6:	8c 93       	st	X, r24
	PORTB=0xef; //PB4로 '0' 출력 (FND Q0 선택)
 1c8:	e8 e3       	ldi	r30, 0x38	; 56
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	8f ee       	ldi	r24, 0xEF	; 239
 1ce:	80 83       	st	Z, r24
	PORTC=FND[F_index]; //PORTC로 FND 초기값 출력 
 1d0:	a5 e3       	ldi	r26, 0x35	; 53
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	80 91 0a 01 	lds	r24, 0x010A
 1d8:	88 2f       	mov	r24, r24
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	e0 50       	subi	r30, 0x00	; 0
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	80 81       	ld	r24, Z
 1e4:	8c 93       	st	X, r24
	PORTA=LED; //PORTA로 LED 출력 
 1e6:	eb e3       	ldi	r30, 0x3B	; 59
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 91 0c 01 	lds	r24, 0x010C
 1ee:	80 83       	st	Z, r24

	while(1)
	{
		for(i=0;i<9;i++)
 1f0:	10 92 0b 01 	sts	0x010B, r1
 1f4:	31 c0       	rjmp	.+98     	; 0x258 <main+0xd2>
		{
			PORTA=~(0x01<<i); // LED 순차적으로(위->아래) 켜주기 위하여 LED 초기 값이 0x00이므로 왼쪽으로 한 칸씩 이동시키고 난 후 보수화 시켜준 것임 
 1f6:	eb e3       	ldi	r30, 0x3B	; 59
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 91 0b 01 	lds	r24, 0x010B
 1fe:	28 2f       	mov	r18, r24
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 2e       	mov	r0, r18
 208:	02 c0       	rjmp	.+4      	; 0x20e <main+0x88>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	0a 94       	dec	r0
 210:	e2 f7       	brpl	.-8      	; 0x20a <main+0x84>
 212:	80 95       	com	r24
 214:	80 83       	st	Z, r24
			PORTC=FND[F_index];
 216:	a5 e3       	ldi	r26, 0x35	; 53
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	80 91 0a 01 	lds	r24, 0x010A
 21e:	88 2f       	mov	r24, r24
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	e0 50       	subi	r30, 0x00	; 0
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	80 81       	ld	r24, Z
 22a:	8c 93       	st	X, r24
			F_index++;
 22c:	80 91 0a 01 	lds	r24, 0x010A
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	80 93 0a 01 	sts	0x010A, r24
			if(F_index==9)
 236:	80 91 0a 01 	lds	r24, 0x010A
 23a:	89 30       	cpi	r24, 0x09	; 9
 23c:	11 f4       	brne	.+4      	; 0x242 <main+0xbc>
				F_index=0;
 23e:	10 92 0a 01 	sts	0x010A, r1
			delay(100); // LED와 7-segment를 맞추기 위하여 시간 지연을 각각 똑같이 준 것임
 242:	64 e6       	ldi	r22, 0x64	; 100
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 67 00 	call	0xce	; 0xce <delay>
	PORTC=FND[F_index]; //PORTC로 FND 초기값 출력 
	PORTA=LED; //PORTA로 LED 출력 

	while(1)
	{
		for(i=0;i<9;i++)
 24e:	80 91 0b 01 	lds	r24, 0x010B
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	80 93 0b 01 	sts	0x010B, r24
 258:	80 91 0b 01 	lds	r24, 0x010B
 25c:	89 30       	cpi	r24, 0x09	; 9
 25e:	58 f2       	brcs	.-106    	; 0x1f6 <main+0x70>
 260:	c7 cf       	rjmp	.-114    	; 0x1f0 <main+0x6a>

00000262 <__vector_2>:
			delay(100); // LED와 7-segment를 맞추기 위하여 시간 지연을 각각 똑같이 준 것임
		}
	} // 버튼을 누르지 않는 동안 LED와 7-segment가 계속 돌아가기 위하여 무한 반복 루프 사용 
}
SIGNAL(SIG_INTERRUPT1) // 외부 인터럽트 1 함수 
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	00 90 5b 00 	lds	r0, 0x005B
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
 27a:	df 93       	push	r29
 27c:	cf 93       	push	r28
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
  while((PIND & 0x02)==0); // PD1 부분만 알아보기 위하여 0x02를 곱해 준 것임
 282:	e0 e3       	ldi	r30, 0x30	; 48
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 2f       	mov	r24, r24
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	82 70       	andi	r24, 0x02	; 2
 28e:	90 70       	andi	r25, 0x00	; 0
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	b9 f3       	breq	.-18     	; 0x282 <__vector_2+0x20>
}						   // 버튼을 누르는 동안 0이되어 인터럽트가 계속 걸려(조건이 맞아 while 문 반복) LED, 7-segment가 멈추는 것임
 294:	cf 91       	pop	r28
 296:	df 91       	pop	r29
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	0f 90       	pop	r0
 2a2:	00 92 5b 00 	sts	0x005B, r0
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
