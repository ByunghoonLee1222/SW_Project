
lds_20160523_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  0000020c  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000042  00000000  00000000  0000097d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000da  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ae  00000000  00000000  00000a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000157  00000000  00000000  00000b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000030  00000000  00000000  00000ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000009c  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_16>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  ac:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_16>:
unsigned char LED;

volatile	unsigned int	Timer0_CNT = 0;

SIGNAL(SIG_OVERFLOW0)	//타이머0 인터럽트 서비스 루틴(14.7456MHz->10mS)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	00 90 5b 00 	lds	r0, 0x005B
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0x70;
  d6:	82 e5       	ldi	r24, 0x52	; 82
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	20 e7       	ldi	r18, 0x70	; 112
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18

	Timer0_CNT++;
  e0:	80 91 00 01 	lds	r24, 0x0100
  e4:	90 91 01 01 	lds	r25, 0x0101
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	90 93 01 01 	sts	0x0101, r25
  ee:	80 93 00 01 	sts	0x0100, r24

	if(Timer0_CNT == 100)		// 1초
  f2:	80 91 00 01 	lds	r24, 0x0100
  f6:	90 91 01 01 	lds	r25, 0x0101
  fa:	84 36       	cpi	r24, 0x64	; 100
  fc:	91 05       	cpc	r25, r1
  fe:	69 f4       	brne	.+26     	; 0x11a <__vector_16+0x66>
	{
		Timer0_CNT = 0;
 100:	10 92 01 01 	sts	0x0101, r1
 104:	10 92 00 01 	sts	0x0100, r1
		LED = (	LED << 1 ) | 0x01;
 108:	80 91 02 01 	lds	r24, 0x0102
 10c:	88 2f       	mov	r24, r24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 93 02 01 	sts	0x0102, r24
	}

	if( LED == 0xff ) LED = 0xfe;		// LED 포트 초기화
 11a:	80 91 02 01 	lds	r24, 0x0102
 11e:	8f 3f       	cpi	r24, 0xFF	; 255
 120:	19 f4       	brne	.+6      	; 0x128 <__vector_16+0x74>
 122:	8e ef       	ldi	r24, 0xFE	; 254
 124:	80 93 02 01 	sts	0x0102, r24
	PORTB = LED;						// 포트 B로 led 값 출력
 128:	88 e3       	ldi	r24, 0x38	; 56
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	20 91 02 01 	lds	r18, 0x0102
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
}																// timer0 : 오버플로 인터럽트 발생마다
 134:	cf 91       	pop	r28
 136:	df 91       	pop	r29
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	00 92 5b 00 	sts	0x005B, r0
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <main>:

int main(void)
{
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xff;		// PORTB 출력으로 선언
 15a:	87 e3       	ldi	r24, 0x37	; 55
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
	LED = 0xff;			// LED 변수 초기 값 선언
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	80 93 02 01 	sts	0x0102, r24
	TCNT0 = 0x70;		// 타이머0 시정수 값 저장
 16a:	82 e5       	ldi	r24, 0x52	; 82
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	20 e7       	ldi	r18, 0x70	; 112
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
	TCCR0 = 0x07;		// 1024분주, 타이머모드
 174:	83 e5       	ldi	r24, 0x53	; 83
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	27 e0       	ldi	r18, 0x07	; 7
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
	TIMSK = 0x01;		// 타이머0 오버플로 인터럽트 인에이블
 17e:	87 e5       	ldi	r24, 0x57	; 87
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
	SREG = 0x80;		// 전체 인터럽트 인에이블					sei();
 188:	8f e5       	ldi	r24, 0x5F	; 95
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	20 e8       	ldi	r18, 0x80	; 128
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
	while(1);
 192:	ff cf       	rjmp	.-2      	; 0x192 <main+0x40>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
