
lbh_20160522_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  00000214  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000042  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000b3  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007f  00000000  00000000  00000329  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000d5  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000008c  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ea       	ldi	r30, 0xA0	; 160
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  c6:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_16>:
unsigned char LED;

volatile unsigned int	Timer0_CNT = 0;

SIGNAL(SIG_OVERFLOW0)				//타이머0 인터럽트 서비스 루틴 (14.7456 MHz->10mS)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	00 90 5b 00 	lds	r0, 0x005B
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
  e6:	df 93       	push	r29
  e8:	cf 93       	push	r28
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0x70;						//타이머 0 정지 
  ee:	e2 e5       	ldi	r30, 0x52	; 82
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 e7       	ldi	r24, 0x70	; 112
  f4:	80 83       	st	Z, r24
	
	Timer0_CNT++;
  f6:	80 91 00 01 	lds	r24, 0x0100
  fa:	90 91 01 01 	lds	r25, 0x0101
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	90 93 01 01 	sts	0x0101, r25
 104:	80 93 00 01 	sts	0x0100, r24
	
	if(Timer0_CNT == 100)			 	//1초
 108:	80 91 00 01 	lds	r24, 0x0100
 10c:	90 91 01 01 	lds	r25, 0x0101
 110:	84 36       	cpi	r24, 0x64	; 100
 112:	91 05       	cpc	r25, r1
 114:	69 f4       	brne	.+26     	; 0x130 <__vector_16+0x62>
	{
		Timer0_CNT = 0;
 116:	10 92 01 01 	sts	0x0101, r1
 11a:	10 92 00 01 	sts	0x0100, r1
		LED = ( LED << 1 ) | 0x01;
 11e:	80 91 02 01 	lds	r24, 0x0102
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 93 02 01 	sts	0x0102, r24
	}

	if( LED == 0xff ) LED =0xfe;		// LED 포트 초기화
 130:	80 91 02 01 	lds	r24, 0x0102
 134:	8f 3f       	cpi	r24, 0xFF	; 255
 136:	19 f4       	brne	.+6      	; 0x13e <__vector_16+0x70>
 138:	8e ef       	ldi	r24, 0xFE	; 254
 13a:	80 93 02 01 	sts	0x0102, r24
	PORTB = LED;						// 포트 B로 led 값 출력 
 13e:	e8 e3       	ldi	r30, 0x38	; 56
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 91 02 01 	lds	r24, 0x0102
 146:	80 83       	st	Z, r24

}
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	00 92 5b 00 	sts	0x005B, r0
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:

int main(void)
{
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xff;					//PORTB 출력으로 선언
 16c:	e7 e3       	ldi	r30, 0x37	; 55
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	80 83       	st	Z, r24
	LED = 0xff;						//LED 변수 초기 값 선언
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	80 93 02 01 	sts	0x0102, r24
	TCNT0 = 0x70;					//타이머 0 시정수 값 저장
 17a:	e2 e5       	ldi	r30, 0x52	; 82
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 e7       	ldi	r24, 0x70	; 112
 180:	80 83       	st	Z, r24
	TCCR0 = 0x07;					//1024분주, 타이머모드
 182:	e3 e5       	ldi	r30, 0x53	; 83
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	87 e0       	ldi	r24, 0x07	; 7
 188:	80 83       	st	Z, r24
	TIMSK = 0x01;					// 타이머0 오버플로 인터럽트 인에이블 // sei();와 동일 (TIMSK SREG) 타이머를 쓰겠다는 설정(밑에것두)
 18a:	e7 e5       	ldi	r30, 0x57	; 87
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 83       	st	Z, r24
	SREG = 0x80;					// 전체 인터럽트 인에이블
 192:	ef e5       	ldi	r30, 0x5F	; 95
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 e8       	ldi	r24, 0x80	; 128
 198:	80 83       	st	Z, r24
 19a:	ff cf       	rjmp	.-2      	; 0x19a <main+0x36>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
