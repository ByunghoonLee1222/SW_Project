
lbh_20160502_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000025  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000524  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000147  00000000  00000000  000007b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000316  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c6  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000028e  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include <avr/io.h>
#include <util/delay.h>
void delay(int d);

int main(void)
{
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
	unsigned char p = 0x01 , d=0;
	unsigned char button;

	DDRA = 0xff; //출력 입출력 방향결정 레지스터 DDR
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0x00; //입력 
  ca:	12 b8       	out	0x02, r1	; 2
	PORTE = 0xff; // 포트의 현 상태 모두 high상태 
  cc:	83 b9       	out	0x03, r24	; 3
  ce:	81 e0       	ldi	r24, 0x01	; 1
		button = PINE;
		d = ~button;
		
		if(d == 0x20)
		{
			PORTA = 0x55;
  d0:	95 e5       	ldi	r25, 0x55	; 85
  d2:	e9 2e       	mov	r14, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d4:	2a ef       	ldi	r18, 0xFA	; 250
  d6:	30 e0       	ldi	r19, 0x00	; 0
		{
			while(1)
			{	
				PORTA = p;
				delay(200);
				p = p<<1;
  d8:	ff 24       	eor	r15, r15
  da:	f3 94       	inc	r15
		}
		if(d == 0x40)
		{
			PORTA = 0x01;
			delay(50);
			PORTA = 0x02;
  dc:	02 e0       	ldi	r16, 0x02	; 2
			delay(50);
			PORTA = 0x04;
  de:	14 e0       	ldi	r17, 0x04	; 4
			delay(50);
			PORTA = 0x08;
  e0:	b8 e0       	ldi	r27, 0x08	; 8
			delay(50);
			PORTA = 0x10;
  e2:	a0 e1       	ldi	r26, 0x10	; 16
			delay(50);
			PORTA = 0x20;
  e4:	70 e2       	ldi	r23, 0x20	; 32
			delay(50);
			PORTA = 0x40;
  e6:	60 e4       	ldi	r22, 0x40	; 64
			delay(50);
			PORTA = 0x80;
  e8:	50 e8       	ldi	r21, 0x80	; 128
	unsigned char p = 0x01 , d=0;
	unsigned char button;

	DDRA = 0xff; //출력 입출력 방향결정 레지스터 DDR
	DDRE = 0x00; //입력 
	PORTE = 0xff; // 포트의 현 상태 모두 high상태 
  ea:	48 2f       	mov	r20, r24
	
	while(1)
	{
		button = PINE;
  ec:	81 b1       	in	r24, 0x01	; 1
		d = ~button;
  ee:	80 95       	com	r24
		
		if(d == 0x20)
  f0:	80 32       	cpi	r24, 0x20	; 32
  f2:	11 f4       	brne	.+4      	; 0xf8 <main+0x3a>
		{
			PORTA = 0x55;
  f4:	eb ba       	out	0x1b, r14	; 27
  f6:	fa cf       	rjmp	.-12     	; 0xec <main+0x2e>
		}
		if(d == 0x40)
  f8:	80 34       	cpi	r24, 0x40	; 64
  fa:	09 f0       	breq	.+2      	; 0xfe <main+0x40>
  fc:	5b c0       	rjmp	.+182    	; 0x1b4 <main+0xf6>
		{
			PORTA = 0x01;
  fe:	fb ba       	out	0x1b, r15	; 27
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x48>
}
void delay(int d) //시간지연
{
	int i;

	for(i=0;i<d;i++) _delay_ms (1);
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	82 33       	cpi	r24, 0x32	; 50
 10e:	91 05       	cpc	r25, r1
 110:	c9 f7       	brne	.-14     	; 0x104 <main+0x46>
		}
		if(d == 0x40)
		{
			PORTA = 0x01;
			delay(50);
			PORTA = 0x02;
 112:	0b bb       	out	0x1b, r16	; 27
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x5c>
}
void delay(int d) //시간지연
{
	int i;

	for(i=0;i<d;i++) _delay_ms (1);
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	82 33       	cpi	r24, 0x32	; 50
 122:	91 05       	cpc	r25, r1
 124:	c9 f7       	brne	.-14     	; 0x118 <main+0x5a>
		{
			PORTA = 0x01;
			delay(50);
			PORTA = 0x02;
			delay(50);
			PORTA = 0x04;
 126:	1b bb       	out	0x1b, r17	; 27
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x70>
}
void delay(int d) //시간지연
{
	int i;

	for(i=0;i<d;i++) _delay_ms (1);
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	82 33       	cpi	r24, 0x32	; 50
 136:	91 05       	cpc	r25, r1
 138:	c9 f7       	brne	.-14     	; 0x12c <main+0x6e>
			delay(50);
			PORTA = 0x02;
			delay(50);
			PORTA = 0x04;
			delay(50);
			PORTA = 0x08;
 13a:	bb bb       	out	0x1b, r27	; 27
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x84>
}
void delay(int d) //시간지연
{
	int i;

	for(i=0;i<d;i++) _delay_ms (1);
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	82 33       	cpi	r24, 0x32	; 50
 14a:	91 05       	cpc	r25, r1
 14c:	c9 f7       	brne	.-14     	; 0x140 <main+0x82>
			delay(50);
			PORTA = 0x04;
			delay(50);
			PORTA = 0x08;
			delay(50);
			PORTA = 0x10;
 14e:	ab bb       	out	0x1b, r26	; 27
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x98>
}
void delay(int d) //시간지연
{
	int i;

	for(i=0;i<d;i++) _delay_ms (1);
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	82 33       	cpi	r24, 0x32	; 50
 15e:	91 05       	cpc	r25, r1
 160:	c9 f7       	brne	.-14     	; 0x154 <main+0x96>
			delay(50);
			PORTA = 0x08;
			delay(50);
			PORTA = 0x10;
			delay(50);
			PORTA = 0x20;
 162:	7b bb       	out	0x1b, r23	; 27
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0xac>
}
void delay(int d) //시간지연
{
	int i;

	for(i=0;i<d;i++) _delay_ms (1);
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	82 33       	cpi	r24, 0x32	; 50
 172:	91 05       	cpc	r25, r1
 174:	c9 f7       	brne	.-14     	; 0x168 <main+0xaa>
			delay(50);
			PORTA = 0x10;
			delay(50);
			PORTA = 0x20;
			delay(50);
			PORTA = 0x40;
 176:	6b bb       	out	0x1b, r22	; 27
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0xc0>
}
void delay(int d) //시간지연
{
	int i;

	for(i=0;i<d;i++) _delay_ms (1);
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	82 33       	cpi	r24, 0x32	; 50
 186:	91 05       	cpc	r25, r1
 188:	c9 f7       	brne	.-14     	; 0x17c <main+0xbe>
			delay(50);
			PORTA = 0x20;
			delay(50);
			PORTA = 0x40;
			delay(50);
			PORTA = 0x80;
 18a:	5b bb       	out	0x1b, r21	; 27
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0xd4>
}
void delay(int d) //시간지연
{
	int i;

	for(i=0;i<d;i++) _delay_ms (1);
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	82 33       	cpi	r24, 0x32	; 50
 19a:	91 05       	cpc	r25, r1
 19c:	c9 f7       	brne	.-14     	; 0x190 <main+0xd2>
			delay(50);
			PORTA = 0x40;
			delay(50);
			PORTA = 0x80;
			delay(50);
			PORTA = 0x00;
 19e:	1b ba       	out	0x1b, r1	; 27
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0xe8>
}
void delay(int d) //시간지연
{
	int i;

	for(i=0;i<d;i++) _delay_ms (1);
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	82 33       	cpi	r24, 0x32	; 50
 1ae:	91 05       	cpc	r25, r1
 1b0:	c9 f7       	brne	.-14     	; 0x1a4 <main+0xe6>
 1b2:	9c cf       	rjmp	.-200    	; 0xec <main+0x2e>
			delay(50);
			
		
		}

		if(d == 0x80) //PB7 누를때 마다 한칸씩 내려감 
 1b4:	80 38       	cpi	r24, 0x80	; 128
 1b6:	09 f0       	breq	.+2      	; 0x1ba <main+0xfc>
 1b8:	99 cf       	rjmp	.-206    	; 0xec <main+0x2e>
		{
			while(1)
			{	
				PORTA = p;
 1ba:	4b bb       	out	0x1b, r20	; 27
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	f9 01       	movw	r30, r18
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x104>
}
void delay(int d) //시간지연
{
	int i;

	for(i=0;i<d;i++) _delay_ms (1);
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	88 3c       	cpi	r24, 0xC8	; 200
 1ca:	91 05       	cpc	r25, r1
 1cc:	c9 f7       	brne	.-14     	; 0x1c0 <main+0x102>
		{
			while(1)
			{	
				PORTA = p;
				delay(200);
				p = p<<1;
 1ce:	84 2f       	mov	r24, r20
 1d0:	88 0f       	add	r24, r24
 1d2:	41 e0       	ldi	r20, 0x01	; 1
				if(p ==0x00) p = 0x01;  //p 가 0x00 이되면 0x01로 초기값을 지정한다.
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <main+0x11a>
 1d6:	89 cf       	rjmp	.-238    	; 0xea <main+0x2c>
 1d8:	89 cf       	rjmp	.-238    	; 0xec <main+0x2e>

000001da <delay>:
	}
	
	
}
void delay(int d) //시간지연
{
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	4a ef       	ldi	r20, 0xFA	; 250
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <delay+0x14>
 1e4:	fa 01       	movw	r30, r20
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <delay+0xc>
	int i;

	for(i=0;i<d;i++) _delay_ms (1);
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
 1ee:	28 17       	cp	r18, r24
 1f0:	39 07       	cpc	r19, r25
 1f2:	c4 f3       	brlt	.-16     	; 0x1e4 <delay+0xa>

}
 1f4:	08 95       	ret

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
